// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  authUserId  String        @unique @default(uuid())
  name        String        @default("anon")
  RoomMessage RoomMessage[]
  RoomUser    RoomUser[]
  player      Player[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Room {
  id        Int           @id @default(autoincrement())
  name      String
  users     RoomUser[]
  messages  RoomMessage[]
  game      Game[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model RoomMessage {
  id        String   @id @default(uuid())
  roomId    Int
  userId    String
  content   String
  timestamp String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room Room @relation(fields: [roomId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@index([roomId])
  @@index([userId])
}

model RoomUser {
  userId   String
  roomId   Int
  roomHost Boolean?

  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  @@id([userId, roomId])
}

model Player {
  id                 String               @id @default(uuid())
  nickname           String
  cashOnHand         Float
  gameId             String
  userId             String
  Game               Game                 @relation(fields: [gameId], references: [id])
  User               User                 @relation(fields: [userId], references: [id])
  Share              Share[]
  MeetingMessage     MeetingMessage[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  marketOrderActions Int
  limitOrderActions  Int
  shortOrderActions  Int
  OperatingRoundVote OperatingRoundVote[]
  PlayerOrder        PlayerOrder[]
}

model Share {
  id        String        @id @default(uuid())
  price     Float
  companyId String
  location  ShareLocation
  gameId    String
  playerId  String?
  Company   Company       @relation(fields: [companyId], references: [id])
  Player    Player?       @relation(fields: [playerId], references: [id])
  Game      Game          @relation(fields: [gameId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum ShareLocation {
  OPEN_MARKET
  IPO
  PLAYER
}

enum StockTier {
  TIER_1
  TIER_2
  TIER_3
  TIER_4
  TIER_5
}

model Company {
  id                  String         @id @default(uuid())
  name                String
  unitPrice           Float
  throughput          Int
  sectorId            String
  gameId              String
  insolvent           Boolean
  stockTier           StockTier      @default(TIER_1)
  tierSharesFulfilled Int            @default(0)
  currentStockPrice   Float?
  cashOnHand          Float?
  mergedWithParent    String?
  mergedWithChildren  String?
  ipoAndFloatPrice    Int
  Sector              Sector         @relation(fields: [sectorId], references: [id])
  Share               Share[]
  StockHistory        StockHistory[]
  Game                Game           @relation(fields: [gameId], references: [id])
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  PlayerOrder         PlayerOrder[]
}

model StockHistory {
  id                Int      @id @default(autoincrement())
  price             Float
  productionRevenue Float
  gameId            String
  companyId         String
  timestamp         Int
  Company           Company  @relation(fields: [companyId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model StockRound {
  id           Int           @id @default(autoincrement())
  phase        Phase[]
  gameId       String
  playerOrders PlayerOrder[]
  Game         Game          @relation(fields: [gameId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

//The order of operations here is action -> order -> stock
// Action being the player's choice, order being the player's request, and stock being the fulfilled order.
model PlayerOrder {
  id           Int           @id @default(autoincrement())
  stockRoundId Int
  phaseId      String
  playerId     String
  companyId    String //We can't reference stockId here because it's not known which stocks which actually be purchased yet, this is more of an "ask"
  gameId       String
  sectorId     String
  filled       Boolean?
  quantity     Int?
  term         Int?
  principal    Int?
  value        Float?
  isSell       Boolean?
  location     ShareLocation
  orderType    OrderType
  Game         Game          @relation(fields: [gameId], references: [id])
  StockRound   StockRound    @relation(fields: [stockRoundId], references: [id])
  Player       Player        @relation(fields: [playerId], references: [id])
  Company      Company       @relation(fields: [companyId], references: [id])
  Phase        Phase         @relation(fields: [phaseId], references: [id])
  Sector       Sector        @relation(fields: [sectorId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum OrderType {
  MARKET
  SHORT
  LIMIT
}

model OperatingRound {
  id                 Int                  @id @default(autoincrement())
  phase              Phase[]
  operatingRoundVote OperatingRoundVote[]
  gameId             String
  Game               Game                 @relation(fields: [gameId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model OperatingRoundVote {
  id               Int                  @id @default(autoincrement())
  operatingRoundId Int
  playerId         String
  actionVoted      OperatingRoundAction
  OperatingRound   OperatingRound       @relation(fields: [operatingRoundId], references: [id])
  Player           Player               @relation(fields: [playerId], references: [id])
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

enum OperatingRoundAction {
  MARKETING
  RESEARCH
  MERGE
  DOWNSIZE
  PRODUCTION
  EXPANSION
  SHARE_BUYBACK
  SHARE_ISSUE
}

model ResearchDeck {
  id        Int      @id @default(autoincrement())
  gameId    String
  cards     Card[]
  Game      Game     @relation(fields: [gameId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id           Int          @id @default(autoincrement())
  name         String
  description  String
  effect       Json
  deckId       Int
  ResearchDeck ResearchDeck @relation(fields: [deckId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Sector {
  id             String        @id @default(uuid())
  name           String
  supply         Int
  demand         Int
  marketingPrice Float
  basePrice      Float
  floatNumberMin Int
  floatNumberMax Int
  Company        Company[]
  PlayerOrder    PlayerOrder[]
  Game           Game?         @relation(fields: [gameId], references: [id])
  gameId         String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Game {
  id                      String           @id @default(uuid())
  name                    String
  currentTurn             Int
  currentOrSubRound       Int
  currentRound            RoundType
  currentActivePlayer     String?
  bankPoolNumber          Int
  consumerPoolNumber      Int
  gameStatus              String
  gameStep                Int
  roomId                  Int
  gameLogs                GameLog[]
  sectors                 Sector[]
  Player                  Player[]
  Company                 Company[]
  Phase                   Phase[]
  StockRound              StockRound[]
  OperatingRound          OperatingRound[]
  ResearchDeck            ResearchDeck[]
  MeetingMessage          MeetingMessage[]
  PlayerOrder             PlayerOrder[]
  Share                   Share[]
  Room                    Room             @relation(fields: [roomId], references: [id])
  currentPhaseId          String?
  currentStockRoundId     Int?
  currentOperatingRoundId Int?
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
}

enum RoundType {
  STOCK
  OPERATING
}

model Phase {
  id               String          @id @default(uuid())
  name             PhaseName
  gameId           String
  phaseTime        Int
  stockRoundId     Int?
  operatingRoundId Int?
  OperatingRound   OperatingRound? @relation(fields: [operatingRoundId], references: [id])
  StockRound       StockRound?     @relation(fields: [stockRoundId], references: [id])
  Game             Game            @relation(fields: [gameId], references: [id])
  PlayerOrder      PlayerOrder[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

enum PhaseName {
  STOCK_RESOLVE_LIMIT_ORDER
  STOCK_MEET
  STOCK_ACTION_ORDER
  STOCK_ACTION_RESULT
  STOCK_ACTION_REVEAL
  STOCK_RESOLVE_MARKET_ORDER
  STOCK_RESOLVE_SHORT_ORDER
  STOCK_RESULTS_OVERVIEW
  OPERATING_PRODUCTION
  OPERATING_STOCK_PRICE_ADJUSTMENT
  OPERATING_MEET
  OPERATING_ACTION_COMPANY_VOTE
  OPERATING_ACTION_COMPANY_VOTE_RESULT
  OPERATING_COMPANY_VOTE_RESOLVE
  CAPITAL_GAINS
  DIVESTMENT
  SECTOR_NEW_COMPANY
}

model GameLog {
  id        Int      @id @default(autoincrement())
  gameId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  game Game @relation(fields: [gameId], references: [id])
}

model MeetingMessage {
  id        Int      @id @default(autoincrement())
  gameId    String
  playerId  String
  content   String
  gameStep  Int
  timestamp String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  game   Game   @relation(fields: [gameId], references: [id])
  player Player @relation(fields: [playerId], references: [id])
}
