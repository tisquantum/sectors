// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  authUserId  String        @unique @default(uuid())
  name        String        @default("anon")
  RoomMessage RoomMessage[]
  RoomUser    RoomUser[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Room {
  id        Int           @id @default(autoincrement())
  name      String
  users     RoomUser[]
  messages  RoomMessage[]
  gameId    String?
  game      Game?         @relation(fields: [gameId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model RoomMessage {
  id        String   @id @default(uuid())
  roomId    Int
  userId    String
  content   String
  timestamp String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room Room @relation(fields: [roomId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@index([roomId])
  @@index([userId])
}

model RoomUser {
  userId   String
  roomId   Int
  roomHost Boolean?

  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  @@id([userId, roomId])
}

model Player {
  id             String           @id @default(uuid())
  nickname       String
  cashOnHand     Float
  gameId         String
  Game           Game             @relation(fields: [gameId], references: [id])
  Stock          Stock[]
  MeetingMessage MeetingMessage[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Stock {
  id           String         @id @default(uuid())
  currentPrice Float
  companyId    String
  location     String
  gameId       String
  playerId     String?
  Company      Company        @relation(fields: [companyId], references: [id])
  Player       Player?        @relation(fields: [playerId], references: [id])
  StockHistory StockHistory[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Company {
  id                 String   @id @default(uuid())
  name               String
  unitPrice          Float
  throughput         Int
  sectorId           String
  gameId             String
  insolvent          Boolean
  currentStockPrice  Float?
  cashOnHand         Float?
  mergedWithParent   String?
  mergedWithChildren String?
  Sector             Sector   @relation(fields: [sectorId], references: [id])
  Stock              Stock[]
  Game               Game     @relation(fields: [gameId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model StockHistory {
  id                Int      @id @default(autoincrement())
  stockId           String
  price             Float
  productionRevenue Float
  gameId            String
  timestamp         Int
  Stock             Stock    @relation(fields: [stockId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model StockRound {
  id        Int      @id @default(autoincrement())
  phase     String
  gameId    String
  Game      Game     @relation(fields: [gameId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OperatingRound {
  id        Int      @id @default(autoincrement())
  actions   Json
  gameId    String
  Game      Game     @relation(fields: [gameId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResearchDeck {
  id        Int      @id @default(autoincrement())
  gameId    String
  cards     Card[]
  Game      Game     @relation(fields: [gameId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id           Int          @id @default(autoincrement())
  name         String
  description  String
  effect       Json
  deckId       Int
  ResearchDeck ResearchDeck @relation(fields: [deckId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Sector {
  id             String    @id @default(uuid())
  name           String
  supply         Int
  demand         Int
  marketingPrice Float
  basePrice      Float
  floatNumberMin Int
  floatNumberMax Int
  Company        Company[]
  Game           Game?     @relation(fields: [gameId], references: [id])
  gameId         String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Game {
  id                  String           @id @default(uuid())
  name                String
  currentTurn         Int
  currentOrSubRound   Int
  currentRound        String
  currentPhase        String
  currentActivePlayer String?
  bankPoolNumber      Int
  consumerPoolNumber  Int
  gameStatus          String
  gameStep            Int
  sectors             Sector[]
  Player              Player[]
  Company             Company[]
  StockRound          StockRound[]
  OperatingRound      OperatingRound[]
  ResearchDeck        ResearchDeck[]
  Room                Room[]
  MeetingMessage      MeetingMessage[]
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

model MeetingMessage {
  id        Int      @id @default(autoincrement())
  gameId    String
  playerId  String
  content   String
  gameStep  Int
  timestamp String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  game   Game   @relation(fields: [gameId], references: [id])
  player Player @relation(fields: [playerId], references: [id])
}
