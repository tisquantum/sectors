// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  authUserId    String         @unique @default(uuid())
  name          String         @default("anon")
  RoomMessage   RoomMessage[]
  RoomUser      RoomUser[]
  player        Player[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  PlayerResults PlayerResult[]
}

model Room {
  id        Int           @id @default(autoincrement())
  name      String
  users     RoomUser[]
  messages  RoomMessage[]
  game      Game[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model RoomMessage {
  id        String   @id @default(uuid())
  roomId    Int
  userId    String
  content   String
  timestamp String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room Room @relation(fields: [roomId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@index([roomId])
  @@index([userId])
}

model RoomUser {
  userId   String
  roomId   Int
  roomHost Boolean?

  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  @@id([userId, roomId])
}

model Player {
  id                       String                    @id @default(uuid())
  nickname                 String
  cashOnHand               Int
  gameId                   String
  userId                   String
  accountStatus            AccountStatus             @default(ACTIVE)
  marginAccount            Int                       @default(0)
  overdraftTier            OverdraftTier?
  Game                     Game                      @relation(fields: [gameId], references: [id])
  User                     User                      @relation(fields: [userId], references: [id])
  Share                    Share[]
  MeetingMessage           MeetingMessage[]
  CaptialGains             CapitalGains[]
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  marketOrderActions       Int
  limitOrderActions        Int
  shortOrderActions        Int
  OperatingRoundVote       OperatingRoundVote[]
  PlayerOrder              PlayerOrder[]
  RevenueDistributionVotes RevenueDistributionVote[]
  PlayerPriority           PlayerPriority[]
  InfluenceVote            InfluenceVote[]
  PlayerResult             PlayerResult[]
}

enum AccountStatus {
  ACTIVE
  FROZEN
  BANKRUPT
}

enum OverdraftTier {
  TIER_1
  TIER_2
  TIER_3
  TIER_4
  TIER_5
}

model Share {
  id               String          @id @default(uuid())
  price            Float
  companyId        String
  location         ShareLocation
  gameId           String
  playerId         String?
  shortOrderId     Int?
  optionContractId Int?
  ShortOrder       ShortOrder?     @relation(fields: [shortOrderId], references: [id])
  OptionContract   OptionContract? @relation(fields: [optionContractId], references: [id])
  Company          Company         @relation(fields: [companyId], references: [id])
  Player           Player?         @relation(fields: [playerId], references: [id])
  Game             Game            @relation(fields: [gameId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

enum ShareLocation {
  OPEN_MARKET
  IPO
  PLAYER
  DERIVATIVE_MARKET
}

enum StockTier {
  TIER_1
  TIER_2
  TIER_3
  TIER_4
  TIER_5
}

model Company {
  id                       String                    @id @default(uuid())
  name                     String
  stockSymbol              String
  unitPrice                Int
  throughput               Int //TODO: Deprecated
  supplyMax                Int                       @default(0)
  supplyBase               Int                       @default(0)
  supplyCurrent            Int                       @default(0)
  demandScore              Int                       @default(0)
  prestigeTokens           Int                       @default(0)
  sectorId                 String
  gameId                   String
  insolvent                Boolean
  isFloated                Boolean                   @default(false)
  hasLoan                  Boolean                   @default(false)
  hasEconomiesOfScale      Boolean                   @default(false)
  stockTier                StockTier                 @default(TIER_1)
  tierSharesFulfilled      Int                       @default(0)
  currentStockPrice        Int                       @default(0)
  cashOnHand               Int                       @default(0)
  mergedWithParent         String?
  mergedWithChildren       String?
  ipoAndFloatPrice         Int
  companyTier              CompanyTier               @default(INCUBATOR)
  status                   CompanyStatus             @default(INACTIVE)
  Sector                   Sector                    @relation(fields: [sectorId], references: [id])
  Share                    Share[]
  StockHistory             StockHistory[]
  Game                     Game                      @relation(fields: [gameId], references: [id])
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  PlayerOrder              PlayerOrder[]
  CompanyOperationPhases   Phase[]
  CompanyVotes             OperatingRoundVote[]
  CompanyActions           CompanyAction[]
  ProductionResults        ProductionResult[]
  RevenueDistributionVotes RevenueDistributionVote[]
  PrestigeRewards          PrestigeRewards[]
  Cards                    Card[]
  OptionContracts          OptionContract[]
  ShortOrders              ShortOrder[]
}

enum CompanyTier {
  INCUBATOR
  STARTUP
  GROWTH
  ESTABLISHED
  ENTERPRISE
  CONGLOMERATE
  TITAN
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  BANKRUPT
}

model StockHistory {
  id                Int         @id @default(autoincrement())
  price             Int
  productionRevenue Int?
  gameId            String
  companyId         String
  phaseId           String
  stepsMoved        Int
  action            StockAction
  Phase             Phase       @relation(fields: [phaseId], references: [id])
  Company           Company     @relation(fields: [companyId], references: [id])
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

enum StockAction {
  INITIAL
  MARKET_BUY
  MARKET_SELL
  SHORT
  LIMIT_BUY
  LIMIT_SELL
  CALL_OPTION
  PRODUCTION
  RESEARCH_EFFECT
  PRESTIGE_REWARD
}

model StockRound {
  id                  Int           @id @default(autoincrement())
  phase               Phase[]
  gameId              String
  stockActionSubRound Int           @default(0)
  gameTurnId          String
  playerOrders        PlayerOrder[]
  GameTurn            GameTurn      @relation(fields: [gameTurnId], references: [id])
  Game                Game          @relation(fields: [gameId], references: [id])
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

//The order of operations here is action -> order -> stock
// Action being the player's choice, order being the player's request, and stock being the fulfilled order.
//option order = premium, strike price, and term (expiration date)
model PlayerOrder {
  id               Int             @id @default(autoincrement())
  stockRoundId     Int
  phaseId          String
  playerId         String
  companyId        String //We can't reference stockId here because it's not known which stocks which actually be purchased yet, this is more of an "ask"
  gameId           String
  sectorId         String
  orderStatus      OrderStatus
  quantity         Int?
  realizedQuantity Int? //quantity that was actually fulfilled
  value            Int? //value to be used for limit orders
  isSell           Boolean?
  isConcealed      Boolean?        @default(true)
  optionContractId Int?
  location         ShareLocation
  orderType        OrderType
  ShortOrder       ShortOrder?
  OptionContract   OptionContract? @relation(fields: [optionContractId], references: [id])
  Game             Game            @relation(fields: [gameId], references: [id])
  StockRound       StockRound      @relation(fields: [stockRoundId], references: [id])
  Player           Player          @relation(fields: [playerId], references: [id])
  Company          Company         @relation(fields: [companyId], references: [id])
  Phase            Phase           @relation(fields: [phaseId], references: [id])
  Sector           Sector          @relation(fields: [sectorId], references: [id])
  submissionStamp  DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

enum DistributionStrategy {
  FAIR_SPLIT // Distribute shares and allow partial fills to orders, things that cannot be split evenly are filled via lottery
  PRIORITY // A priority list is set prior to any distribution resolution based on some metric, orders that cannot be filled are outright rejected
  BID_PRIORITY // Orders are filled based on the highest bid per share, orders that cannot be filled are outright rejected
}

enum OrderStatus {
  PENDING
  OPEN //only pertains to LIMIT, SHORT, OPTION
  FILLED
  FILLED_PENDING_SETTLEMENT //only pertains to LIMIT post limit being filled during the game but before the limit phase has occured to collect/pay the money
  CANCELLED
  REJECTED
}

model ShortOrder {
  id                        Int          @id @default(autoincrement())
  Share                     Share[]
  shortSalePrice            Int
  shortStockPriceAtPurchase Int
  marginAccountMinimum      Int
  borrowRate                Int
  coverPrice                Int?
  playerOrderId             Int?         @unique
  companyId                 String
  PlayerOrder               PlayerOrder? @relation(fields: [playerOrderId], references: [id])
  Company                   Company      @relation(fields: [companyId], references: [id])
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @updatedAt
}

//premium should be calculated as strike price - current price * term or something like this
//term advances every stock round
model OptionContract {
  id             Int           @id @default(autoincrement())
  premium        Int //the price of the option contract to be paid by the player
  currentPremium Int?
  strikePrice    Int //the price at which the player can buy the shares
  exercisePrice  Int? //the price at which the player sold the shares
  term           Int
  currentTerm    Int           @default(0)
  shares         Share[]
  shareCount     Int           @default(0) // the amount of shares in the contract
  stepBonus      Int           @default(0) // how many steps the price will move up if option contract is fulfilled
  tableauSlot    Int?          @default(0) // the slot in the tableau where the option contract is placed
  playerOrderId  Int?          @unique
  companyId      String
  contractState  ContractState
  gameId         String
  PlayerOrders   PlayerOrder[] //only one will ultimately be the "filled order"
  Game           Game          @relation(fields: [gameId], references: [id])
  Company        Company       @relation(fields: [companyId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum ContractState {
  PURCHASED
  FOR_SALE
  DISCARDED
  QUEUED
  EXPIRED
  EXERCISED
}

enum OrderType {
  MARKET
  SHORT
  LIMIT
  OPTION
}

model OperatingRound {
  id                       Int                       @id @default(autoincrement())
  phase                    Phase[]
  operatingRoundVote       OperatingRoundVote[]
  companyActions           CompanyAction[]
  productionResults        ProductionResult[]
  revenueDistributionVotes RevenueDistributionVote[]
  gameId                   String
  gameTurnId               String
  GameTurn                 GameTurn                  @relation(fields: [gameTurnId], references: [id])
  Game                     Game                      @relation(fields: [gameId], references: [id])
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
}

model CapitalGains {
  id            Int      @id @default(autoincrement())
  gameId        String
  playerId      String
  capitalGains  Int
  taxPercentage Int
  gameTurnId    String
  Game          Game     @relation(fields: [gameId], references: [id])
  Player        Player   @relation(fields: [playerId], references: [id])
  GameTurn      GameTurn @relation(fields: [gameTurnId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PrestigeRewards {
  id         Int            @id @default(autoincrement())
  gameId     String
  companyId  String
  gameTurnId String
  reward     PrestigeReward
  Game       Game           @relation(fields: [gameId], references: [id])
  GameTurn   GameTurn       @relation(fields: [gameTurnId], references: [id])
  Company    Company        @relation(fields: [companyId], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

enum PrestigeReward {
  ELASTICITY
  CAPITAL_INJECTION
  MAGNET_EFFECT
  INVESTOR_CONFIDENCE
  BULL_SIGNAL
}

model ProductionResult {
  id                       Int                       @id @default(autoincrement())
  companyId                String
  operatingRoundId         Int
  revenue                  Int
  steps                    Int                       @default(0)
  throughputResult         Int                       @default(0) //0 is better
  revenueDistribution      RevenueDistribution?
  revenueDistributionVotes RevenueDistributionVote[]
  Company                  Company                   @relation(fields: [companyId], references: [id])
  OperatingRound           OperatingRound            @relation(fields: [operatingRoundId], references: [id])
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
}

model RevenueDistributionVote {
  id                  Int                 @id @default(autoincrement())
  operatingRoundId    Int
  productionResultId  Int
  playerId            String
  companyId           String
  weight              Int                 @default(1)
  revenueDistribution RevenueDistribution
  ProductionResult    ProductionResult    @relation(fields: [productionResultId], references: [id])
  Player              Player              @relation(fields: [playerId], references: [id])
  Company             Company             @relation(fields: [companyId], references: [id])
  OperatingRound      OperatingRound      @relation(fields: [operatingRoundId], references: [id])
  submissionStamp     DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

enum RevenueDistribution {
  DIVIDEND_FULL
  DIVIDEND_FIFTY_FIFTY
  RETAINED
}

model CompanyAction {
  id               Int                   @id @default(autoincrement())
  companyId        String
  action           OperatingRoundAction?
  operatingRoundId Int
  resolved         Boolean               @default(false)
  Company          Company               @relation(fields: [companyId], references: [id])
  OperatingRound   OperatingRound        @relation(fields: [operatingRoundId], references: [id])
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
}

model OperatingRoundVote {
  id               Int                  @id @default(autoincrement())
  operatingRoundId Int
  playerId         String
  companyId        String
  weight           Int                  @default(1)
  actionVoted      OperatingRoundAction
  Company          Company              @relation(fields: [companyId], references: [id])
  OperatingRound   OperatingRound       @relation(fields: [operatingRoundId], references: [id])
  Player           Player               @relation(fields: [playerId], references: [id])
  submissionStamp  DateTime?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

enum OperatingRoundAction {
  MARKETING
  MARKETING_SMALL_CAMPAIGN
  RESEARCH
  MERGE
  DOWNSIZE
  PRODUCTION
  EXPANSION
  SHARE_BUYBACK
  SHARE_ISSUE
  SPEND_PRESTIGE
  VETO
  INCREASE_PRICE
  DECREASE_PRICE
  LOBBY
  LOAN
}

model ResearchDeck {
  id        Int      @id @default(autoincrement())
  gameId    String
  cards     Card[]
  Game      Game     @relation(fields: [gameId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id           Int                    @id @default(autoincrement())
  name         String
  description  String
  sector       SectorName
  effect       ResearchCardEffect
  effectType   ResearchCardEffectType @default(PERMANENT)
  effectUsed   Boolean?               @default(false)
  deckId       Int
  gameId       String
  companyId    String?
  ResearchDeck ResearchDeck           @relation(fields: [deckId], references: [id])
  Game         Game                   @relation(fields: [gameId], references: [id])
  Company      Company?               @relation(fields: [companyId], references: [id])
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
}

enum ResearchCardEffectType {
  PERMANENT
  ONE_TIME_USE
  DECAY
}

enum ResearchCardEffect {
  PRODUCT_DEVELOPMENT
  QUALITY_CONTROL
  GOVERNMENT_GRANT
  CLINICAL_TRIAL
  RENEWABLE_ENERGY
  ARTIFICIAL_INTELLIGENCE
  ECOMMERCE
  ROBOTICS
  NEW_ALLOY
  ENERGY_SAVING
  CORPORATE_ESPIONAGE
  GLOBALIZATION
  ECONOMIES_OF_SCALE
  MARKET_EXPANSION
  AUTOMATION
  SPECIALIZATION
  DIVERSIFICATION
  INNOVATION
  NO_DISCERNIBLE_FINDINGS
}

model Sector {
  id                     String        @id @default(uuid())
  name                   String
  sectorName             SectorName    @default(GENERAL)
  consumers              Int           @default(0)
  supply                 Int
  demand                 Int
  demandBonus            Int?          @default(0)
  marketingPrice         Float
  basePrice              Float
  ipoMin                 Int           @default(10)
  ipoMax                 Int           @default(20)
  sharePercentageToFloat Int           @default(50)
  unitPriceMin           Int           @default(0)
  unitPriceMax           Int           @default(0)
  supplyDefault          Int           @default(0)
  demandMin              Int           @default(0)
  demandMax              Int           @default(1)
  supplyMin              Int           @default(0)
  supplyMax              Int           @default(1)
  Company                Company[]
  PlayerOrder            PlayerOrder[]
  Game                   Game?         @relation(fields: [gameId], references: [id])
  gameId                 String?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
}

enum SectorName {
  MATERIALS
  INDUSTRIALS
  CONSUMER_DISCRETIONARY
  CONSUMER_STAPLES
  CONSUMER_CYCLICAL
  CONSUMER_DEFENSIVE
  ENERGY
  HEALTHCARE
  TECHNOLOGY
  GENERAL
}

model Game {
  id                      String               @id @default(uuid())
  name                    String
  currentTurn             String
  currentOrSubRound       Int
  currentRound            RoundType
  currentActivePlayer     String?
  bankPoolNumber          Int
  consumerPoolNumber      Int
  gameStatus              GameStatus           @default(PENDING)
  gameStep                Int
  roomId                  Int
  overdraft               Boolean              @default(true) //facilitates overdrafts for player accounts during stock purchase
  nextPrestigeReward      Int?
  gameMaxTurns            Int?
  distributionStrategy    DistributionStrategy @default(FAIR_SPLIT)
  gameLogs                GameLog[]
  sectors                 Sector[]
  InfluenceRound          InfluenceRound[]
  GameTurn                GameTurn[]
  Player                  Player[]
  Company                 Company[]
  Phase                   Phase[]
  StockRound              StockRound[]
  OperatingRound          OperatingRound[]
  ResearchDeck            ResearchDeck[]
  MeetingMessage          MeetingMessage[]
  PlayerOrder             PlayerOrder[]
  Share                   Share[]
  OptionContracts         OptionContract[]
  CapitalGains            CapitalGains[]
  PrestigeRewards         PrestigeRewards[]
  Cards                   Card[]
  Room                    Room                 @relation(fields: [roomId], references: [id])
  currentPhaseId          String?
  currentStockRoundId     Int?
  currentOperatingRoundId Int?
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  GameRecord              GameRecord?
}

enum GameStatus {
  PENDING
  ACTIVE
  PAUSED
  FINISHED
}

model GameTurn {
  id             String           @id @default(uuid())
  gameId         String
  turn           Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  playerPriority PlayerPriority[]

  game            Game              @relation(fields: [gameId], references: [id])
  operatingRounds OperatingRound[]
  stockRounds     StockRound[]
  influenceRounds InfluenceRound[]
  phases          Phase[]
  capitalGains    CapitalGains[]
  prestigeRewards PrestigeRewards[]
}

model PlayerPriority {
  id         String @id @default(uuid())
  gameTurnId String
  playerId   String
  priority   Int

  gameTurn GameTurn @relation(fields: [gameTurnId], references: [id])
  player   Player   @relation(fields: [playerId], references: [id])
}

enum RoundType {
  INFLUENCE
  GAME_UPKEEP
  STOCK
  OPERATING
}

model Phase {
  id               String          @id @default(uuid())
  name             PhaseName
  gameId           String
  gameTurnId       String
  phaseTime        Int
  stockRoundId     Int?
  operatingRoundId Int?
  influenceRoundId Int?
  companyId        String?
  Company          Company?        @relation(fields: [companyId], references: [id])
  OperatingRound   OperatingRound? @relation(fields: [operatingRoundId], references: [id])
  StockRound       StockRound?     @relation(fields: [stockRoundId], references: [id])
  InfluenceRound   InfluenceRound? @relation(fields: [influenceRoundId], references: [id])
  Game             Game            @relation(fields: [gameId], references: [id])
  GameTurn         GameTurn        @relation(fields: [gameTurnId], references: [id])
  PlayerOrder      PlayerOrder[]
  StockHistory     StockHistory[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

enum PhaseName {
  INFLUENCE_BID_ACTION
  INFLUENCE_BID_REVEAL
  INFLUENCE_BID_RESOLVE
  START_TURN
  END_TURN
  STOCK_RESOLVE_LIMIT_ORDER
  STOCK_MEET
  STOCK_ACTION_ORDER
  STOCK_ACTION_RESULT
  STOCK_ACTION_REVEAL
  STOCK_RESOLVE_MARKET_ORDER
  STOCK_SHORT_ORDER_INTEREST
  STOCK_ACTION_SHORT_ORDER //let players cover their open shorts if they choose to
  STOCK_RESOLVE_PENDING_SHORT_ORDER //open all pending short orders
  STOCK_RESOLVE_PENDING_OPTION_ORDER //resolve all pending conflicts
  STOCK_ACTION_OPTION_ORDER //let players exercise their options if they choose to 
  STOCK_RESOLVE_OPTION_ORDER //players either succeed or fail after expiration (?)
  STOCK_OPEN_LIMIT_ORDERS //open all pending limit orders
  STOCK_RESULTS_OVERVIEW
  OPERATING_PRODUCTION
  OPERATING_PRODUCTION_VOTE
  OPERATING_PRODUCTION_VOTE_RESOLVE
  OPERATING_STOCK_PRICE_ADJUSTMENT
  OPERATING_MEET
  OPERATING_ACTION_COMPANY_VOTE
  OPERATING_ACTION_COMPANY_VOTE_RESULT
  OPERATING_COMPANY_VOTE_RESOLVE
  CAPITAL_GAINS
  DIVESTMENT
  SECTOR_NEW_COMPANY
}

model InfluenceRound {
  id             Int             @id @default(autoincrement())
  gameId         String
  roundStep      Int
  gameTurnId     String
  phase          Phase[]
  InfluenceVotes InfluenceVote[]
  isRevealed     Boolean         @default(false)
  Game           Game            @relation(fields: [gameId], references: [id])
  GameTurn       GameTurn        @relation(fields: [gameTurnId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model InfluenceVote {
  id               Int            @id @default(autoincrement())
  influenceRoundId Int
  playerId         String
  influence        Int
  InfluenceRound   InfluenceRound @relation(fields: [influenceRoundId], references: [id])
  Player           Player         @relation(fields: [playerId], references: [id])
  submissionStamp  DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model GameLog {
  id        Int      @id @default(autoincrement())
  gameId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  game Game @relation(fields: [gameId], references: [id])
}

model MeetingMessage {
  id        Int      @id @default(autoincrement())
  gameId    String
  playerId  String
  content   String
  gameStep  Int
  timestamp String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  game   Game   @relation(fields: [gameId], references: [id])
  player Player @relation(fields: [playerId], references: [id])
}

model GameRecord {
  id           String         @id @default(uuid())
  gameId       String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PlayerResult PlayerResult[]
  game         Game           @relation(fields: [gameId], references: [id])
}

model PlayerResult {
  id            String     @id @default(uuid())
  playerId      String
  userId        String
  netWorth      Int
  placement     Int
  rankingPoints Int //determined based on the placement and amount of players in the game
  player        Player     @relation(fields: [playerId], references: [id])
  user          User       @relation(fields: [userId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  gameRecordId  String
  GameRecord    GameRecord @relation(fields: [gameRecordId], references: [id])
}
