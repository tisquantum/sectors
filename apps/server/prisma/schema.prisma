// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String            @id @default(uuid()) @db.Uuid
  authUserId      String            @unique @default(uuid()) @db.Uuid
  name            String            @default("anon")
  RoomUser        RoomUser[]
  player          Player[]
  playerExecutive ExecutivePlayer[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  PlayerResults   PlayerResult[]
}

model Room {
  id            Int             @id @default(autoincrement())
  name          String
  users         RoomUser[]
  messages      RoomMessage[]
  game          Game[]
  executiveGame ExecutiveGame[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model RoomMessage {
  id        String   @id @default(uuid())
  roomId    Int
  userId    String   @db.Uuid
  content   String
  timestamp String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room     Room     @relation(fields: [roomId], references: [id])
  roomUser RoomUser @relation(fields: [userId, roomId], references: [userId, roomId])

  @@index([roomId])
  @@index([userId])
}

model RoomUser {
  userId   String   @db.Uuid
  roomId   Int
  roomHost Boolean?
  playerId String?  @unique

  user        User          @relation(fields: [userId], references: [id])
  room        Room          @relation(fields: [roomId], references: [id])
  player      Player?       @relation(fields: [playerId], references: [id])
  RoomMessage RoomMessage[]

  @@id([userId, roomId])
}

model Player {
  id                       String                    @id @default(uuid())
  nickname                 String
  cashOnHand               Int
  gameId                   String
  userId                   String                    @db.Uuid
  accountStatus            AccountStatus             @default(ACTIVE)
  marginAccount            Int                       @default(0)
  overdraftTier            OverdraftTier?
  Game                     Game                      @relation(fields: [gameId], references: [id])
  User                     User                      @relation(fields: [userId], references: [id])
  Share                    Share[]
  MeetingMessage           MeetingMessage[]
  CaptialGains             CapitalGains[]
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  marketOrderActions       Int
  limitOrderActions        Int
  shortOrderActions        Int
  OperatingRoundVote       OperatingRoundVote[]
  PlayerOrder              PlayerOrder[]
  RevenueDistributionVotes RevenueDistributionVote[]
  PlayerPriority           PlayerPriority[]
  InfluenceVote            InfluenceVote[]
  PlayerResult             PlayerResult[]
  InsolvencyContribution   InsolvencyContribution[]
  //1:1 relation with Entity
  Entity                   Entity?                   @relation(fields: [entityId], references: [id])
  entityId                 String?                   @unique
  Prizes                   Prize[]
  PrizeVotes               PrizeVote[]
  PrizeDistributions       PrizeDistribution[]
  RoomUser                 RoomUser?
  PlayerHeadline           PlayerHeadline[]
}

enum AccountStatus {
  ACTIVE
  FROZEN
  BANKRUPT
}

enum OverdraftTier {
  TIER_1
  TIER_2
  TIER_3
  TIER_4
  TIER_5
}

model Share {
  id                String                 @id @default(uuid())
  price             Float
  companyId         String
  location          ShareLocation
  gameId            String
  playerId          String?
  shortOrderId      Int?
  optionContractId  Int?
  ShortOrder        ShortOrder?            @relation(fields: [shortOrderId], references: [id])
  OptionContract    OptionContract?        @relation(fields: [optionContractId], references: [id])
  Company           Company                @relation(fields: [companyId], references: [id])
  Player            Player?                @relation(fields: [playerId], references: [id])
  Game              Game                   @relation(fields: [gameId], references: [id])
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  Transactions      TransactionsOnShares[]
  ShareContribution ShareContribution[]
}

enum ShareLocation {
  OPEN_MARKET
  IPO
  PLAYER
  DERIVATIVE_MARKET
}

enum StockTier {
  TIER_1
  TIER_2
  TIER_3
  TIER_4
  TIER_5
}

model Company {
  id                       String                    @id @default(uuid())
  name                     String
  stockSymbol              String
  unitPrice                Int
  throughput               Int //TODO: Deprecated
  supplyMax                Int                       @default(0)
  supplyBase               Int                       @default(0)
  supplyCurrent            Int                       @default(0)
  demandScore              Int                       @default(0)
  baseDemand               Int                       @default(0)
  prestigeTokens           Int                       @default(0)
  sectorId                 String
  gameId                   String
  isFloated                Boolean                   @default(false)
  hasLoan                  Boolean                   @default(false)
  hasEconomiesOfScale      Boolean                   @default(false)
  stockTier                StockTier                 @default(TIER_1)
  tierSharesFulfilled      Int                       @default(0)
  currentStockPrice        Int                       @default(0)
  cashOnHand               Int                       @default(0)
  mergedWithParent         String?
  mergedWithChildren       String?
  ipoAndFloatPrice         Int
  companyTier              CompanyTier               @default(INCUBATOR)
  status                   CompanyStatus             @default(INACTIVE)
  Sector                   Sector                    @relation(fields: [sectorId], references: [id])
  Share                    Share[]
  StockHistory             StockHistory[]
  Game                     Game                      @relation(fields: [gameId], references: [id])
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  PlayerOrder              PlayerOrder[]
  CompanyOperationPhases   Phase[]
  CompanyVotes             OperatingRoundVote[]
  CompanyActions           CompanyAction[]
  ProductionResults        ProductionResult[]
  RevenueDistributionVotes RevenueDistributionVote[]
  PrestigeRewards          PrestigeRewards[]
  Cards                    Card[]
  OptionContracts          OptionContract[]
  ShortOrders              ShortOrder[]
  TransactionsPerformedOn  Transaction[]
  InsolvencyContributions  InsolvencyContribution[]
  PrizeDistributions       PrizeDistribution[]
  CompanyActionOrders      CompanyActionOrder[]
  Entity                   Entity?                   @relation(fields: [entityId], references: [id])
  entityId                 String?                   @unique
  Headline                 Headline[]
  companySpaces            CompanySpace[]
}

enum CompanyTier {
  INCUBATOR
  STARTUP
  GROWTH
  ESTABLISHED
  ENTERPRISE
  CONGLOMERATE
  TITAN
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  INSOLVENT
  BANKRUPT
}

model StockHistory {
  id                Int         @id @default(autoincrement())
  price             Int
  productionRevenue Int?
  gameId            String
  companyId         String
  phaseId           String
  stepsMoved        Int
  action            StockAction
  Game              Game        @relation(fields: [gameId], references: [id])
  Phase             Phase       @relation(fields: [phaseId], references: [id])
  Company           Company     @relation(fields: [companyId], references: [id])
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

enum StockAction {
  INITIAL
  MARKET_BUY
  MARKET_SELL
  SHORT
  LIMIT_BUY
  LIMIT_SELL
  CALL_OPTION
  PRODUCTION
  RESEARCH_EFFECT
  PRESTIGE_REWARD
  MAGNET_EFFECT
}

model StockRound {
  id             String          @id @default(uuid())
  phase          Phase[]
  gameId         String
  //DEPRECATED: stockActionSubRound Int           @default(0)
  gameTurnId     String
  playerOrders   PlayerOrder[]
  stockSubRounds StockSubRound[]
  GameTurn       GameTurn        @relation(fields: [gameTurnId], references: [id])
  Game           Game            @relation(fields: [gameId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model StockSubRound {
  id           String        @id @default(uuid())
  roundNumber  Int
  stockRoundId String
  gameId       String
  gameTurnId   String
  playerOrders PlayerOrder[]
  GameTurn     GameTurn      @relation(fields: [gameTurnId], references: [id])
  StockRound   StockRound    @relation(fields: [stockRoundId], references: [id])
  Game         Game          @relation(fields: [gameId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Phase        Phase[]
}

//The order of operations here is action -> order -> stock
// Action being the player's choice, order being the player's request, and stock being the fulfilled order.
//option order = premium, strike price, and term (expiration date)
model PlayerOrder {
  id               String          @id @default(uuid())
  stockRoundId     String
  stockSubRoundId  String
  phaseId          String
  playerId         String
  companyId        String //We can't reference stockId here because it's not known which stocks which actually be purchased yet, this is more of an "ask"
  gameId           String
  sectorId         String
  orderStatus      OrderStatus
  quantity         Int?
  realizedQuantity Int? //quantity that was actually fulfilled
  value            Int? //value to be used for limit orders
  isSell           Boolean?
  isConcealed      Boolean?        @default(true)
  optionContractId Int?
  gameTurnCreated  String
  location         ShareLocation
  orderType        OrderType
  ShortOrder       ShortOrder?
  OptionContract   OptionContract? @relation(fields: [optionContractId], references: [id])
  Game             Game            @relation(fields: [gameId], references: [id])
  StockRound       StockRound      @relation(fields: [stockRoundId], references: [id])
  StockSubRound    StockSubRound   @relation(fields: [stockSubRoundId], references: [id])
  Player           Player          @relation(fields: [playerId], references: [id])
  Company          Company         @relation(fields: [companyId], references: [id])
  Phase            Phase           @relation(fields: [phaseId], references: [id])
  Sector           Sector          @relation(fields: [sectorId], references: [id])
  GameTurn         GameTurn        @relation(fields: [gameTurnCreated], references: [id])
  submissionStamp  DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

enum DistributionStrategy {
  FAIR_SPLIT // Distribute shares and allow partial fills to orders, things that cannot be split evenly are filled via lottery
  PRIORITY // A priority list is set prior to any distribution resolution based on some metric, orders that cannot be filled are outright rejected
  BID_PRIORITY // Orders are filled based on the highest bid per share, orders that cannot be filled are outright rejected
}

enum OrderStatus {
  PENDING
  OPEN //only pertains to LIMIT, SHORT, OPTION
  FILLED
  FILLED_PENDING_SETTLEMENT //only pertains to LIMIT post limit being filled during the game but before the limit phase has occured to collect/pay the money
  CANCELLED
  REJECTED
}

model ShortOrder {
  id                        Int          @id @default(autoincrement())
  Share                     Share[]
  shortSalePrice            Int
  shortStockPriceAtPurchase Int
  marginAccountMinimum      Int
  borrowRate                Int
  coverPrice                Int?
  playerOrderId             String?      @unique
  companyId                 String
  PlayerOrder               PlayerOrder? @relation(fields: [playerOrderId], references: [id])
  Company                   Company      @relation(fields: [companyId], references: [id])
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @updatedAt
}

//premium should be calculated as strike price - current price * term or something like this
//term advances every stock round
model OptionContract {
  id             Int           @id @default(autoincrement())
  premium        Int //the price of the option contract to be paid by the player
  currentPremium Int?
  strikePrice    Int //the price at which the player can buy the shares
  exercisePrice  Int? //the price at which the player sold the shares
  term           Int
  currentTerm    Int           @default(0)
  shares         Share[]
  shareCount     Int           @default(0) // the amount of shares in the contract
  stepBonus      Int           @default(0) // how many steps the price will move up if option contract is fulfilled
  tableauSlot    Int?          @default(0) // the slot in the tableau where the option contract is placed
  playerOrderId  Int?          @unique
  companyId      String
  contractState  ContractState
  gameId         String
  PlayerOrders   PlayerOrder[] //only one will ultimately be the "filled order"
  Game           Game          @relation(fields: [gameId], references: [id])
  Company        Company       @relation(fields: [companyId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum ContractState {
  PURCHASED
  FOR_SALE
  DISCARDED
  QUEUED
  EXPIRED
  EXERCISED
}

enum OrderType {
  MARKET
  SHORT
  LIMIT
  OPTION
}

model OperatingRound {
  id                       String                    @id @default(uuid())
  phase                    Phase[]
  operatingRoundVote       OperatingRoundVote[]
  companyActions           CompanyAction[]
  productionResults        ProductionResult[]
  revenueDistributionVotes RevenueDistributionVote[]
  gameId                   String
  gameTurnId               String
  GameTurn                 GameTurn                  @relation(fields: [gameTurnId], references: [id])
  Game                     Game                      @relation(fields: [gameId], references: [id])
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
}

model CapitalGains {
  id            Int      @id @default(autoincrement())
  gameId        String
  playerId      String
  capitalGains  Int
  taxPercentage Int
  gameTurnId    String
  Game          Game     @relation(fields: [gameId], references: [id])
  Player        Player   @relation(fields: [playerId], references: [id])
  GameTurn      GameTurn @relation(fields: [gameTurnId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PrestigeRewards {
  id          Int            @id @default(autoincrement())
  gameId      String
  companyId   String
  gameTurnId  String
  reward      PrestigeReward
  description String?
  Game        Game           @relation(fields: [gameId], references: [id])
  GameTurn    GameTurn       @relation(fields: [gameTurnId], references: [id])
  Company     Company        @relation(fields: [companyId], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

enum PrestigeReward {
  ELASTICITY
  CAPITAL_INJECTION
  MAGNET_EFFECT
  INVESTOR_CONFIDENCE
  BULL_SIGNAL
  INFLUENCER
}

model ProductionResult {
  id                       Int                       @id @default(autoincrement())
  companyId                String
  operatingRoundId         String
  revenue                  Int
  consumers                Int                       @default(0)
  steps                    Int                       @default(0)
  throughputResult         Int                       @default(0) //0 is better
  revenueDistribution      RevenueDistribution?
  revenueDistributionVotes RevenueDistributionVote[]
  Company                  Company                   @relation(fields: [companyId], references: [id])
  OperatingRound           OperatingRound            @relation(fields: [operatingRoundId], references: [id])
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
}

model RevenueDistributionVote {
  id                  Int                 @id @default(autoincrement())
  operatingRoundId    String
  productionResultId  Int
  playerId            String
  companyId           String
  weight              Int                 @default(1)
  revenueDistribution RevenueDistribution
  ProductionResult    ProductionResult    @relation(fields: [productionResultId], references: [id])
  Player              Player              @relation(fields: [playerId], references: [id])
  Company             Company             @relation(fields: [companyId], references: [id])
  OperatingRound      OperatingRound      @relation(fields: [operatingRoundId], references: [id])
  submissionStamp     DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

enum RevenueDistribution {
  DIVIDEND_FULL
  DIVIDEND_FIFTY_FIFTY
  RETAINED
}

model CompanyAction {
  id               Int                   @id @default(autoincrement())
  companyId        String
  action           OperatingRoundAction?
  operatingRoundId String?
  cost             Int                   @default(0)
  resolved         Boolean               @default(false)
  actedOn          Boolean?              @default(false)
  isPassive        Boolean?              @default(false)
  Company          Company               @relation(fields: [companyId], references: [id])
  OperatingRound   OperatingRound?       @relation(fields: [operatingRoundId], references: [id])
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  GameTurn         GameTurn?             @relation(fields: [gameTurnId], references: [id])
  gameTurnId       String?
}

model InsolvencyContribution {
  id                Int      @id @default(autoincrement())
  gameId            String
  playerId          String
  companyId         String
  cashContribution  Int
  shareContribution Int
  gameTurnId        String
  Game              Game     @relation(fields: [gameId], references: [id])
  Company           Company  @relation(fields: [companyId], references: [id])
  Player            Player   @relation(fields: [playerId], references: [id])
  GameTurn          GameTurn @relation(fields: [gameTurnId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ShareContribution {
  id                       Int      @id @default(autoincrement())
  insolvencyContributionId Int
  shareId                  String
  Share                    Share    @relation(fields: [shareId], references: [id])
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model OperatingRoundVote {
  id               Int                  @id @default(autoincrement())
  operatingRoundId String
  playerId         String
  companyId        String
  weight           Int                  @default(1)
  actionVoted      OperatingRoundAction
  Company          Company              @relation(fields: [companyId], references: [id])
  OperatingRound   OperatingRound       @relation(fields: [operatingRoundId], references: [id])
  Player           Player               @relation(fields: [playerId], references: [id])
  submissionStamp  DateTime?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

enum OperatingRoundAction {
  MARKETING
  MARKETING_SMALL_CAMPAIGN
  RESEARCH
  MERGE
  DOWNSIZE
  PRODUCTION
  EXPANSION
  SHARE_BUYBACK
  SHARE_ISSUE
  SPEND_PRESTIGE
  VETO
  INCREASE_PRICE
  DECREASE_PRICE
  LOBBY
  LOAN
  OUTSOURCE
  LICENSING_AGREEMENT
  //sector specific active actions
  VISIONARY
  STRATEGIC_RESERVE
  RAPID_EXPANSION
  FASTTRACK_APPROVAL
  PRICE_FREEZE
  REBRAND
  SURGE_PRICING
  //passive effect actions
  INNOVATION_SURGE
  REGULATORY_SHIELD
  EXTRACT
  MANUFACTURE
  STEADY_DEMAND
  BOOM_CYCLE
  CARBON_CREDIT
}

model ResearchDeck {
  id        Int      @id @default(autoincrement())
  gameId    String
  cards     Card[]
  Game      Game     @relation(fields: [gameId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id           Int                    @id @default(autoincrement())
  name         String
  description  String
  sector       SectorName
  effect       ResearchCardEffect
  effectType   ResearchCardEffectType @default(PERMANENT)
  effectUsed   Boolean?               @default(false)
  deckId       Int
  gameId       String
  companyId    String?
  ResearchDeck ResearchDeck           @relation(fields: [deckId], references: [id])
  Game         Game                   @relation(fields: [gameId], references: [id])
  Company      Company?               @relation(fields: [companyId], references: [id])
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
}

enum ResearchCardEffectType {
  PERMANENT
  ONE_TIME_USE
  DECAY
}

enum ResearchCardEffect {
  PRODUCT_DEVELOPMENT
  QUALITY_CONTROL
  GOVERNMENT_GRANT
  CLINICAL_TRIAL
  RENEWABLE_ENERGY
  ARTIFICIAL_INTELLIGENCE
  ECOMMERCE
  ROBOTICS
  NEW_ALLOY
  ENERGY_SAVING
  CORPORATE_ESPIONAGE
  GLOBALIZATION
  ECONOMIES_OF_SCALE
  MARKET_EXPANSION
  AUTOMATION
  SPECIALIZATION
  DIVERSIFICATION
  INNOVATION
  //PATENT_FILING
  NO_DISCERNIBLE_FINDINGS
}

model Sector {
  id                     String           @id @default(uuid())
  name                   String
  sectorName             SectorName       @default(GENERAL)
  consumers              Int              @default(0)
  supply                 Int
  demand                 Int
  demandBonus            Int?             @default(0)
  marketingPrice         Float
  basePrice              Float
  ipoMin                 Int              @default(10)
  ipoMax                 Int              @default(20)
  sharePercentageToFloat Int              @default(50)
  unitPriceMin           Int              @default(0)
  unitPriceMax           Int              @default(0)
  supplyDefault          Int              @default(0)
  demandMin              Int              @default(0)
  demandMax              Int              @default(1)
  supplyMin              Int              @default(0)
  supplyMax              Int              @default(1)
  Company                Company[]
  PlayerOrder            PlayerOrder[]
  Game                   Game?            @relation(fields: [gameId], references: [id])
  gameId                 String?
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  SectorPrize            SectorPrize[]
  SectorPriority         SectorPriority[]
  Headline               Headline[]
}

enum SectorName {
  MATERIALS
  INDUSTRIALS
  CONSUMER_DISCRETIONARY
  CONSUMER_STAPLES
  CONSUMER_CYCLICAL
  CONSUMER_DEFENSIVE
  ENERGY
  HEALTHCARE
  TECHNOLOGY
  GENERAL
}

model Game {
  id                      String                   @id @default(uuid())
  name                    String
  currentTurn             String
  currentOrSubRound       Int
  currentRound            RoundType
  currentActivePlayer     String?
  sectorPriority          SectorPriority[]
  bankPoolNumber          Int
  consumerPoolNumber      Int
  gameStatus              GameStatus               @default(PENDING)
  gameStep                Int
  roomId                  Int
  overdraft               Boolean                  @default(true) //facilitates overdrafts for player accounts during stock purchase
  isPaused                Boolean                  @default(false)
  playerOrdersConcealed   Boolean                  @default(true) //Conceals player orders until the stock round reveal phase
  useLimitOrders          Boolean                  @default(true)
  useShortOrders          Boolean                  @default(true)
  useOptionOrders         Boolean                  @default(true)
  certificateLimit        Int                      @default(12)
  economyScore            Int                      @default(10)
  isTimerless             Boolean                  @default(false)
  nextPrestigeReward      Int?
  gameMaxTurns            Int?
  capitalInjectionRewards Int[] //track Capital Injection rewards, should we instate prestige rewards on game creation instead and put this there?
  distributionStrategy    DistributionStrategy     @default(FAIR_SPLIT)
  gameLogs                GameLog[]
  sectors                 Sector[]
  InfluenceRound          InfluenceRound[]
  GameTurn                GameTurn[]
  Player                  Player[]
  Company                 Company[]
  Phase                   Phase[]
  StockRound              StockRound[]
  StockSubRound           StockSubRound[]
  OperatingRound          OperatingRound[]
  ResearchDeck            ResearchDeck[]
  MeetingMessage          MeetingMessage[]
  PlayerOrder             PlayerOrder[]
  Headlines               Headline[]
  Share                   Share[]
  OptionContracts         OptionContract[]
  CapitalGains            CapitalGains[]
  PrestigeRewards         PrestigeRewards[]
  Cards                   Card[]
  Room                    Room                     @relation(fields: [roomId], references: [id])
  currentPhaseId          String?
  currentStockRoundId     String?
  currentOperatingRoundId String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  GameRecord              GameRecord?
  Transactions            Transaction[]
  Entities                Entity[]
  InsolvencyContribution  InsolvencyContribution[]
  StockHistory            StockHistory[]
  Prizes                  Prize[]
  PlayerHeadline          PlayerHeadline[]
  CompanyAwardTrack       CompanyAwardTrack[]
}

model SectorPriority {
  id        String   @id @default(uuid())
  gameId    String
  sectorId  String
  priority  Int
  Game      Game     @relation(fields: [gameId], references: [id])
  Sector    Sector   @relation(fields: [sectorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Headline {
  id          String           @id @default(uuid())
  type        HeadlineType
  title       String
  description String
  gameId      String
  cost        Int
  timestamp   String
  sectorId    String?
  companyId   String?
  saleSlot    Int?
  location    HeadlineLocation
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  game            Game             @relation(fields: [gameId], references: [id])
  playerHeadlines PlayerHeadline[]
  sector          Sector?          @relation(fields: [sectorId], references: [id])
  company         Company?         @relation(fields: [companyId], references: [id])
}

enum HeadlineLocation {
  DECK
  FOR_SALE
  SOLD
  DISCARDED
}

enum HeadlineType {
  COMPANY_NEGATIVE_1
  COMPANY_NEGATIVE_2
  COMPANY_NEGATIVE_3
  COMPANY_POSITIVE_1
  COMPANY_POSITIVE_2
  COMPANY_POSITIVE_3
  SECTOR_NEGATIVE_1
  SECTOR_NEGATIVE_2
  SECTOR_NEGATIVE_3
  SECTOR_POSITIVE_1
  SECTOR_POSITIVE_2
  SECTOR_POSITIVE_3
}

model PlayerHeadline {
  id         String   @id @default(uuid())
  playerId   String
  headlineId String
  gameId     String
  gameTurnId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  game     Game     @relation(fields: [gameId], references: [id])
  gameTurn GameTurn @relation(fields: [gameTurnId], references: [id])
  player   Player   @relation(fields: [playerId], references: [id])
  headline Headline @relation(fields: [headlineId], references: [id])
}

enum GameStatus {
  PENDING
  ACTIVE
  PAUSED
  FINISHED
}

model GameTurn {
  id                     String                   @id @default(uuid())
  gameId                 String
  turn                   Int
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  playerPriority         PlayerPriority[]
  companyActionOrder     CompanyActionOrder[]
  game                   Game                     @relation(fields: [gameId], references: [id])
  operatingRounds        OperatingRound[]
  stockRounds            StockRound[]
  influenceRounds        InfluenceRound[]
  phases                 Phase[]
  capitalGains           CapitalGains[]
  prestigeRewards        PrestigeRewards[]
  companyActions         CompanyAction[]
  playerOrders           PlayerOrder[]
  transactions           Transaction[]
  insolvencyContribution InsolvencyContribution[]
  prizes                 Prize[]
  prizeVotes             PrizeVote[]
  prizeDistributions     PrizeDistribution[]
  PlayerHeadline         PlayerHeadline[]
  StockSubRound          StockSubRound[]
}

model CompanyActionOrder {
  id            String   @id @default(uuid())
  gameTurnId    String
  companyId     String
  orderPriority Int
  Company       Company  @relation(fields: [companyId], references: [id])
  GameTurn      GameTurn @relation(fields: [gameTurnId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PlayerPriority {
  id         String @id @default(uuid())
  gameTurnId String
  playerId   String
  priority   Int

  gameTurn GameTurn @relation(fields: [gameTurnId], references: [id])
  player   Player   @relation(fields: [playerId], references: [id])
}

enum RoundType {
  INFLUENCE
  PRIZE
  GAME_UPKEEP
  STOCK
  OPERATING
}

model Phase {
  id               String          @id @default(uuid())
  name             PhaseName
  gameId           String
  gameTurnId       String
  phaseTime        Int
  stockRoundId     String?
  stockSubRoundId  String?
  operatingRoundId String?
  influenceRoundId Int?
  companyId        String?
  Company          Company?        @relation(fields: [companyId], references: [id])
  OperatingRound   OperatingRound? @relation(fields: [operatingRoundId], references: [id])
  StockRound       StockRound?     @relation(fields: [stockRoundId], references: [id])
  StockSubRound    StockSubRound?  @relation(fields: [stockSubRoundId], references: [id])
  InfluenceRound   InfluenceRound? @relation(fields: [influenceRoundId], references: [id])
  Game             Game            @relation(fields: [gameId], references: [id])
  GameTurn         GameTurn        @relation(fields: [gameTurnId], references: [id])
  PlayerOrder      PlayerOrder[]
  StockHistory     StockHistory[]
  Transactions     Transaction[]
  phaseStartTime   DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

enum PhaseName {
  INFLUENCE_BID_ACTION
  INFLUENCE_BID_REVEAL
  INFLUENCE_BID_RESOLVE
  START_TURN
  END_TURN
  STOCK_RESOLVE_LIMIT_ORDER
  STOCK_MEET
  STOCK_ACTION_ORDER
  STOCK_ACTION_RESULT
  STOCK_ACTION_REVEAL
  STOCK_RESOLVE_MARKET_ORDER
  STOCK_SHORT_ORDER_INTEREST
  STOCK_ACTION_SHORT_ORDER //let players cover their open shorts if they choose to
  STOCK_RESOLVE_PENDING_SHORT_ORDER //open all pending short orders
  STOCK_RESOLVE_PENDING_OPTION_ORDER //resolve all pending conflicts
  STOCK_ACTION_OPTION_ORDER //let players exercise their options if they choose to 
  STOCK_RESOLVE_OPTION_ORDER //players either succeed or fail after expiration (?)
  STOCK_OPEN_LIMIT_ORDERS //open all pending limit orders
  STOCK_RESULTS_OVERVIEW
  OPERATING_PRODUCTION
  OPERATING_PRODUCTION_VOTE
  OPERATING_PRODUCTION_VOTE_RESOLVE
  OPERATING_STOCK_PRICE_ADJUSTMENT
  OPERATING_MEET
  OPERATING_ACTION_COMPANY_VOTE
  OPERATING_ACTION_COMPANY_VOTE_RESULT
  OPERATING_COMPANY_VOTE_RESOLVE
  CAPITAL_GAINS
  DIVESTMENT
  SECTOR_NEW_COMPANY
  PRIZE_VOTE_ACTION
  PRIZE_VOTE_RESOLVE
  PRIZE_DISTRIBUTE_ACTION
  PRIZE_DISTRIBUTE_RESOLVE
  HEADLINE_RESOLVE
}

model InfluenceRound {
  id             Int             @id @default(autoincrement())
  gameId         String
  roundStep      Int
  gameTurnId     String
  maxInfluence   Int             @default(0)
  phase          Phase[]
  InfluenceVotes InfluenceVote[]
  isRevealed     Boolean         @default(false)
  Game           Game            @relation(fields: [gameId], references: [id])
  GameTurn       GameTurn        @relation(fields: [gameTurnId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model InfluenceVote {
  id               Int            @id @default(autoincrement())
  influenceRoundId Int
  playerId         String
  influence        Int
  InfluenceRound   InfluenceRound @relation(fields: [influenceRoundId], references: [id])
  Player           Player         @relation(fields: [playerId], references: [id])
  submissionStamp  DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model GameLog {
  id        Int      @id @default(autoincrement())
  gameId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  game Game @relation(fields: [gameId], references: [id])
}

model MeetingMessage {
  id        Int      @id @default(autoincrement())
  gameId    String
  playerId  String
  content   String
  gameStep  Int
  timestamp String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  game   Game   @relation(fields: [gameId], references: [id])
  player Player @relation(fields: [playerId], references: [id])
}

model GameRecord {
  id           String         @id @default(uuid())
  gameId       String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PlayerResult PlayerResult[]
  game         Game           @relation(fields: [gameId], references: [id])
}

model PlayerResult {
  id            String     @id @default(uuid())
  playerId      String
  userId        String     @db.Uuid
  netWorth      Int
  placement     Int
  rankingPoints Int //determined based on the placement and amount of players in the game
  player        Player     @relation(fields: [playerId], references: [id])
  user          User       @relation(fields: [userId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  gameRecordId  String
  GameRecord    GameRecord @relation(fields: [gameRecordId], references: [id])
}

enum EntityType {
  PLAYER
  PLAYER_MARGIN_ACCOUNT
  COMPANY
  BANK
  OPEN_MARKET
  DERIVATIVE_MARKET
  IPO
}

enum TransactionType {
  SHARE
  CASH
}

enum TransactionSubType {
  DEFAULT
  SHORT
  OPTION_CALL
  OPTION_CALL_EXERCISE
  LIMIT_BUY
  LIMIT_SELL
  MARKET_BUY
  MARKET_SELL
  DIVESTMENT
  OPERATING_COST
  DIVIDEND
  TRANCHE
  INFLUENCE
  SHARE_LIQUIDATION
  HEADLINE_PURCHASE
}

model Entity {
  id               String        @id @default(uuid())
  gameId           String
  entityType       EntityType
  fromTransactions Transaction[] @relation("FromEntity")
  toTransactions   Transaction[] @relation("ToEntity")
  marginAccountId  String?
  Player           Player?
  Company          Company?
  Game             Game          @relation(fields: [gameId], references: [id])
}

model Transaction {
  id                 String                 @id @default(uuid())
  gameId             String
  phaseId            String
  gameTurnId         String
  fromEntityId       String
  toEntityId         String
  transactionType    TransactionType
  transactionSubType TransactionSubType
  amount             Int
  description        String?
  companyInvolvedId  String?
  Shares             TransactionsOnShares[]
  fromEntity         Entity                 @relation("FromEntity", fields: [fromEntityId], references: [id])
  toEntity           Entity                 @relation("ToEntity", fields: [toEntityId], references: [id])
  timestamp          DateTime
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  Company            Company?               @relation(fields: [companyInvolvedId], references: [id])
  Game               Game                   @relation(fields: [gameId], references: [id])
  GameTurn           GameTurn               @relation(fields: [gameTurnId], references: [id])
  Phase              Phase                  @relation(fields: [phaseId], references: [id])
}

model TransactionsOnShares {
  id            String      @id @default(uuid())
  transactionId String
  shareId       String
  Transaction   Transaction @relation(fields: [transactionId], references: [id])
  Share         Share       @relation(fields: [shareId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Prize {
  id                 String              @id @default(uuid())
  gameId             String
  gameTurnId         String
  playerId           String?
  sectorPrizeId      String[]
  prestigeAmount     Int?
  cashAmount         Int?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  Player             Player?             @relation(fields: [playerId], references: [id])
  Game               Game                @relation(fields: [gameId], references: [id])
  GameTurn           GameTurn            @relation(fields: [gameTurnId], references: [id])
  SectorPrizes       SectorPrize[]
  PrizeVotes         PrizeVote[]
  PrizeDistributions PrizeDistribution[]
}

model PrizeDistribution {
  id               String                @id @default(uuid())
  prizeId          String
  distributionType PrizeDistributionType
  playerId         String?
  prestigeAmount   Int?
  cashAmount       Int?
  passiveEffect    OperatingRoundAction?
  companyId        String?
  Prize            Prize                 @relation(fields: [prizeId], references: [id])
  Player           Player?               @relation(fields: [playerId], references: [id])
  Company          Company?              @relation(fields: [companyId], references: [id])
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  GameTurn         GameTurn?             @relation(fields: [gameTurnId], references: [id])
  gameTurnId       String?
}

enum PrizeDistributionType {
  CASH
  PRESTIGE
  PASSIVE_EFFECT
}

model PrizeVote {
  id         Int      @id @default(autoincrement())
  playerId   String
  gameTurnId String
  prizeId    String
  Player     Player   @relation(fields: [playerId], references: [id])
  GameTurn   GameTurn @relation(fields: [gameTurnId], references: [id])
  Prize      Prize    @relation(fields: [prizeId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model SectorPrize {
  id        String   @id @default(uuid())
  prizeId   String
  sectorId  String
  Prize     Prize    @relation(fields: [prizeId], references: [id])
  Sector    Sector   @relation(fields: [sectorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CompanyAwardTrack {
  id                      String                   @id @default(uuid()) @db.Uuid
  gameId                  String
  awardTrackType          AwardTrackType
  awardTrackName          String
  Game                    Game                     @relation(fields: [gameId], references: [id])
  companyAwardTrackSpaces CompanyAwardTrackSpace[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
}

enum AwardTrackType {
  RESEARCH
  MARKETING
  CATALYST //sector
}

model CompanyAwardTrackSpace {
  id                    String            @id @default(uuid()) @db.Uuid
  gameId                String
  awardTrackId          String            @db.Uuid
  awardTrackSpaceNumber Int
  companySpaces         CompanySpace[]
  CompanyAwardTrack     CompanyAwardTrack @relation(fields: [awardTrackId], references: [id])
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model CompanySpace {
  id                       String                 @id @default(uuid()) @db.Uuid
  companyId                String
  companyAwardTrackSpaceId String                 @db.Uuid
  receivedAward            Boolean                @default(false)
  Company                  Company                @relation(fields: [companyId], references: [id])
  CompanyAwardTrackSpace   CompanyAwardTrackSpace @relation(fields: [companyAwardTrackSpaceId], references: [id])
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
}

// new game time

model ExecutiveGame {
  id                     String                   @id @default(uuid()) @db.Uuid
  name                   String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  gameStatus             ExecutiveGameStatus      @default(PENDING)
  phases                 ExecutivePhase[]
  gameTurn               ExecutiveGameTurn[]
  players                ExecutivePlayer[]
  executiveCards         ExecutiveCard[]
  influence              Influence[]
  ExecutiveVictoryPoint  ExecutiveVictoryPoint[]
  ExecutiveAgenda        ExecutiveAgenda[]
  ExecutiveInfluenceVote ExecutiveInfluenceVote[]
  ExecutiveTrick         ExecutiveTrick[]
  VoteMarker             VoteMarker[]
  ExecutiveInfluenceBid  ExecutiveInfluenceBid[]
  roomId                 Int
  Room                   Room                     @relation(fields: [roomId], references: [id])
}

enum ExecutiveGameStatus {
  PENDING
  ACTIVE
  PAUSED
  FINISHED
}

model ExecutiveGameTurn {
  id             String                   @id @default(uuid()) @db.Uuid
  gameId         String                   @db.Uuid
  turnNumber     Int
  phases         ExecutivePhase[]
  playerPasses   ExecutivePlayerPass[]
  turnType       TurnType
  game           ExecutiveGame            @relation(fields: [gameId], references: [id])
  tricks         ExecutiveTrick[]
  influenceBids  ExecutiveInfluenceBid[]
  influenceVotes ExecutiveInfluenceVote[]
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
}

model ExecutivePlayerPass {
  id         String            @id @default(uuid()) @db.Uuid
  playerId   String            @db.Uuid
  gameTurnId String            @db.Uuid
  player     ExecutivePlayer   @relation(fields: [playerId], references: [id])
  gameTurn   ExecutiveGameTurn @relation(fields: [gameTurnId], references: [id])
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model ExecutivePhase {
  id             String             @id @default(uuid()) @db.Uuid
  gameId         String             @db.Uuid
  gameTurnId     String             @db.Uuid
  activePlayerId String?            @db.Uuid
  phaseName      ExecutivePhaseName
  player         ExecutivePlayer?   @relation(fields: [activePlayerId], references: [id])
  game           ExecutiveGame      @relation(fields: [gameId], references: [id])
  gameTurn       ExecutiveGameTurn  @relation(fields: [gameTurnId], references: [id])
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

enum ExecutivePhaseName {
  START_GAME
  START_TURN
  END_TURN
  MOVE_COO_AND_GENERAL_COUNSEL
  DEAL_CARDS
  INFLUENCE_BID
  INFLUENCE_BID_SELECTION
  REVEAL_TRUMP
  SELECT_TRICK
  REVEAL_TRICK
  RESOLVE_TRICK
  VOTE
  RESOLVE_VOTE
  RESOLVE_AGENDA
  RESOLVE_LEADERSHIP
  GAME_END
}

model ExecutiveInfluenceBid {
  id                  String            @id @default(uuid()) @db.Uuid
  gameId              String            @db.Uuid
  toPlayerId          String            @db.Uuid
  fromPlayerId        String            @db.Uuid
  influenceBids       InfluenceBid[]
  game                ExecutiveGame     @relation(fields: [gameId], references: [id])
  toPlayer            ExecutivePlayer   @relation("INFLUENCE_BID_TO_PLAYER", fields: [toPlayerId], references: [id])
  fromPlayer          ExecutivePlayer   @relation("INFLUENCE_BID_FROM_PLAYER", fields: [fromPlayerId], references: [id])
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  ExecutiveGameTurn   ExecutiveGameTurn @relation(fields: [executiveGameTurnId], references: [id])
  executiveGameTurnId String            @db.Uuid
}

model ExecutiveInfluenceVote {
  id                  String             @id @default(uuid()) @db.Uuid
  gameId              String             @db.Uuid
  playerId            String             @db.Uuid
  influence           Influence[]
  game                ExecutiveGame      @relation(fields: [gameId], references: [id])
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  ExecutiveGameTurn   ExecutiveGameTurn? @relation(fields: [executiveGameTurnId], references: [id])
  executiveGameTurnId String?            @db.Uuid
}

model ExecutiveTrick {
  id            String            @id @default(uuid()) @db.Uuid
  gameId        String            @db.Uuid
  turnId        String            @db.Uuid
  trickWinnerId String            @db.Uuid
  game          ExecutiveGame     @relation(fields: [gameId], references: [id])
  turn          ExecutiveGameTurn @relation(fields: [turnId], references: [id])
  trickCards    TrickCard[]
  winner        ExecutivePlayer   @relation(fields: [trickWinnerId], references: [id])
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model TrickCard {
  id         String         @id @default(uuid()) @db.Uuid
  trickId    String         @db.Uuid
  cardId     String         @db.Uuid
  gameTurnId String         @db.Uuid
  isLead     Boolean        @default(false)
  isTrump    Boolean        @default(false)
  trick      ExecutiveTrick @relation(fields: [trickId], references: [id])
  card       ExecutiveCard  @relation(fields: [cardId], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

enum TurnType {
  INFLUENCE
  TRICK
}

enum CardLocation {
  DECK
  TRUMP
  DISCARD
  TRICK
  HAND
  GIFT
  BRIBE
}

model ExecutivePlayer {
  id                               String                  @id @default(uuid()) @db.Uuid
  gameId                           String                  @db.Uuid
  userId                           String                  @db.Uuid
  nickname                         String                  @default("executive-anon")
  seatIndex                        Int
  isCOO                            Boolean                 @default(false)
  isGeneralCounsel                 Boolean                 @default(false)
  voteMarker                       VoteMarker[]
  victoryPoints                    ExecutiveVictoryPoint[]
  cards                            ExecutiveCard[]
  game                             ExecutiveGame           @relation(fields: [gameId], references: [id])
  createdAt                        DateTime                @default(now())
  updatedAt                        DateTime                @updatedAt
  user                             User                    @relation(fields: [userId], references: [id])
  selfInfluence                    Influence[]             @relation("OF_PLAYER")
  ownedByInfluence                 Influence[]             @relation("OWNED_BY_PLAYER")
  agendas                          ExecutiveAgenda[]
  executiveTricks                  ExecutiveTrick[]
  executiveInfluenceBidsToPlayer   ExecutiveInfluenceBid[] @relation("INFLUENCE_BID_TO_PLAYER")
  executiveInfluenceBidsFromPlayer ExecutiveInfluenceBid[] @relation("INFLUENCE_BID_FROM_PLAYER")
  executivePhases                  ExecutivePhase[]
  ExecutivePlayerPass              ExecutivePlayerPass[]
}

model VoteMarker {
  id        String          @id @default(uuid()) @db.Uuid
  gameId    String          @db.Uuid
  playerId  String          @db.Uuid
  game      ExecutiveGame   @relation(fields: [gameId], references: [id])
  player    ExecutivePlayer @relation(fields: [playerId], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model ExecutiveAgenda {
  id          String          @id @default(uuid()) @db.Uuid
  gameId      String          @db.Uuid
  playerId    String          @db.Uuid
  agendaType  Agenda
  description String
  game        ExecutiveGame   @relation(fields: [gameId], references: [id])
  player      ExecutivePlayer @relation(fields: [playerId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum Agenda {
  CEO_THREE_PLAYERS
  FIRST_LEFT_CEO
  SECOND_LEFT_CEO
  THIRD_LEFT_CEO
  BECOME_CEO_NO_SHARE
  FOREIGN_INVESTOR_CEO
  BECOME_CEO_WITH_FOREIGN_INVESTOR
}

model ExecutiveVictoryPoint {
  id               String           @id @default(uuid()) @db.Uuid
  gameId           String           @db.Uuid
  playerId         String           @db.Uuid
  victoryPointType VictoryPointType
  victoryPoint     Int
  game             ExecutiveGame    @relation(fields: [gameId], references: [id])
  player           ExecutivePlayer  @relation(fields: [playerId], references: [id])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

enum VictoryPointType {
  GIFT //1
  VOTE //2
  RELATIONSHIP //3
  AGENDA //4
}

enum InfluenceType {
  CEO
  PLAYER
}

enum InfluenceLocation {
  CEO
  OF_PLAYER
  BRIBE
  RELATIONSHIP
  OWNED_BY_PLAYER
}

model Influence {
  id                       String                  @id @default(uuid()) @db.Uuid
  gameId                   String                  @db.Uuid
  selfPlayerId             String?                 @db.Uuid
  Game                     ExecutiveGame           @relation(fields: [gameId], references: [id])
  selfPlayer               ExecutivePlayer?        @relation("OF_PLAYER", fields: [selfPlayerId], references: [id])
  ownedByPlayerId          String?                 @db.Uuid
  ownedByPlayer            ExecutivePlayer?        @relation("OWNED_BY_PLAYER", fields: [ownedByPlayerId], references: [id])
  influenceType            InfluenceType
  influenceLocation        InfluenceLocation
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  ExecutiveInfluenceVote   ExecutiveInfluenceVote? @relation(fields: [executiveInfluenceVoteId], references: [id])
  executiveInfluenceVoteId String?                 @db.Uuid
  influenceBids            InfluenceBid[]
}

model InfluenceBid {
  id                      String                 @id @default(uuid()) @db.Uuid
  influenceId             String                 @db.Uuid
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  Influence               Influence              @relation(fields: [influenceId], references: [id])
  ExecutiveInfluenceBid   ExecutiveInfluenceBid? @relation(fields: [executiveInfluenceBidId], references: [id])
  executiveInfluenceBidId String?                @db.Uuid
}

model ExecutiveCard {
  id           String           @id @default(uuid()) @db.Uuid
  gameId       String           @db.Uuid
  playerId     String?          @db.Uuid
  cardValue    Int
  cardLocation CardLocation
  isLocked     Boolean          @default(false)
  cardSuit     CardSuit
  Game         ExecutiveGame    @relation(fields: [gameId], references: [id])
  player       ExecutivePlayer? @relation(fields: [playerId], references: [id])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  tricks       TrickCard[]
}

enum CardSuit {
  DIAMOND
  HEART
  CLUB
  SPADE
}
